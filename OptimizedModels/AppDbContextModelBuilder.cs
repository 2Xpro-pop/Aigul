// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Aigul.OptimizedModels
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var room = RoomEntityType.Create(this);
            var user = UserEntityType.Create(this);

            RoomEntityType.CreateAnnotations(room);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var room = FindEntityType("Aigul.Data.Room")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            room.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var aigulDataRoomTableBase = new TableBase("Aigul.Data.Room", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", aigulDataRoomTableBase);
            aigulDataRoomTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", aigulDataRoomTableBase);
            aigulDataRoomTableBase.Columns.Add("Id", idColumnBase);
            var isLockedColumnBase = new ColumnBase<ColumnMappingBase>("IsLocked", "INTEGER", aigulDataRoomTableBase);
            aigulDataRoomTableBase.Columns.Add("IsLocked", isLockedColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", aigulDataRoomTableBase);
            aigulDataRoomTableBase.Columns.Add("Name", nameColumnBase);
            var pricePerNightColumnBase = new ColumnBase<ColumnMappingBase>("PricePerNight", "INTEGER", aigulDataRoomTableBase);
            aigulDataRoomTableBase.Columns.Add("PricePerNight", pricePerNightColumnBase);
            relationalModel.DefaultTables.Add("Aigul.Data.Room", aigulDataRoomTableBase);
            var aigulDataRoomMappingBase = new TableMappingBase<ColumnMappingBase>(room, aigulDataRoomTableBase, true);
            aigulDataRoomTableBase.AddTypeMapping(aigulDataRoomMappingBase, false);
            defaultTableMappings.Add(aigulDataRoomMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, room.FindProperty("Id")!, aigulDataRoomMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, room.FindProperty("Description")!, aigulDataRoomMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isLockedColumnBase, room.FindProperty("IsLocked")!, aigulDataRoomMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, room.FindProperty("Name")!, aigulDataRoomMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pricePerNightColumnBase, room.FindProperty("PricePerNight")!, aigulDataRoomMappingBase);

            var tableMappings = new List<TableMapping>();
            room.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var roomsTable = new Table("Rooms", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", roomsTable);
            roomsTable.Columns.Add("Id", idColumn);
            var descriptionColumn = new Column("Description", "TEXT", roomsTable);
            roomsTable.Columns.Add("Description", descriptionColumn);
            var isLockedColumn = new Column("IsLocked", "INTEGER", roomsTable);
            roomsTable.Columns.Add("IsLocked", isLockedColumn);
            var nameColumn = new Column("Name", "TEXT", roomsTable);
            roomsTable.Columns.Add("Name", nameColumn);
            var pricePerNightColumn = new Column("PricePerNight", "INTEGER", roomsTable);
            roomsTable.Columns.Add("PricePerNight", pricePerNightColumn);
            var pK_Rooms = new UniqueConstraint("PK_Rooms", roomsTable, new[] { idColumn });
            roomsTable.PrimaryKey = pK_Rooms;
            var pK_RoomsUc = RelationalModel.GetKey(this,
                "Aigul.Data.Room",
                new[] { "Id" });
            pK_Rooms.MappedKeys.Add(pK_RoomsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RoomsUc).Add(pK_Rooms);
            roomsTable.UniqueConstraints.Add("PK_Rooms", pK_Rooms);
            relationalModel.Tables.Add(("Rooms", null), roomsTable);
            var roomsTableMapping = new TableMapping(room, roomsTable, true);
            roomsTable.AddTypeMapping(roomsTableMapping, false);
            tableMappings.Add(roomsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, room.FindProperty("Id")!, roomsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, room.FindProperty("Description")!, roomsTableMapping);
            RelationalModel.CreateColumnMapping(isLockedColumn, room.FindProperty("IsLocked")!, roomsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, room.FindProperty("Name")!, roomsTableMapping);
            RelationalModel.CreateColumnMapping(pricePerNightColumn, room.FindProperty("PricePerNight")!, roomsTableMapping);

            var user = FindEntityType("Aigul.Data.User")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var aigulDataUserTableBase = new TableBase("Aigul.Data.User", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", aigulDataUserTableBase);
            aigulDataUserTableBase.Columns.Add("Id", idColumnBase0);
            var isAdminColumnBase = new ColumnBase<ColumnMappingBase>("IsAdmin", "INTEGER", aigulDataUserTableBase);
            aigulDataUserTableBase.Columns.Add("IsAdmin", isAdminColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", aigulDataUserTableBase);
            aigulDataUserTableBase.Columns.Add("Name", nameColumnBase0);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "TEXT", aigulDataUserTableBase);
            aigulDataUserTableBase.Columns.Add("Password", passwordColumnBase);
            relationalModel.DefaultTables.Add("Aigul.Data.User", aigulDataUserTableBase);
            var aigulDataUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, aigulDataUserTableBase, true);
            aigulDataUserTableBase.AddTypeMapping(aigulDataUserMappingBase, false);
            defaultTableMappings0.Add(aigulDataUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, user.FindProperty("Id")!, aigulDataUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAdminColumnBase, user.FindProperty("IsAdmin")!, aigulDataUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, user.FindProperty("Name")!, aigulDataUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, user.FindProperty("Password")!, aigulDataUserMappingBase);

            var tableMappings0 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", usersTable);
            usersTable.Columns.Add("Id", idColumn0);
            var isAdminColumn = new Column("IsAdmin", "INTEGER", usersTable);
            usersTable.Columns.Add("IsAdmin", isAdminColumn);
            var nameColumn0 = new Column("Name", "TEXT", usersTable);
            usersTable.Columns.Add("Name", nameColumn0);
            var passwordColumn = new Column("Password", "TEXT", usersTable);
            usersTable.Columns.Add("Password", passwordColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn0 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "Aigul.Data.User",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(user, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings0.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, user.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(isAdminColumn, user.FindProperty("IsAdmin")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, user.FindProperty("Name")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, user.FindProperty("Password")!, usersTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
